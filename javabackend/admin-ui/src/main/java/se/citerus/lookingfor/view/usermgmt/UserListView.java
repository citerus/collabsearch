package se.citerus.lookingfor.view.usermgmt;

import java.io.IOException;
import java.util.List;

import se.citerus.lookingfor.ViewSwitchListener;
import se.citerus.lookingfor.logic.User;
import se.citerus.lookingfor.logic.UserHandler;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.util.BeanContainer;
import com.vaadin.event.ItemClickEvent;
import com.vaadin.event.ItemClickEvent.ItemClickListener;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Table;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.VerticalSplitPanel;

public class UserListView extends CustomComponent {
	
	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private Button homeButton;
	@AutoGenerated
	private VerticalLayout verticalSplitPanel_1;
	@AutoGenerated
	private HorizontalLayout horizontalLayout_2;
	@AutoGenerated
	private Button addButton;
	@AutoGenerated
	private Button editButton;
	@AutoGenerated
	private Button deleteButton;
	@AutoGenerated
	private Label filler_1;
	@AutoGenerated
	private Table table;
	
	private String selectedUsername;
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 * @param listener 
	 */
	public UserListView(final ViewSwitchListener listener) {
		buildMainLayout();
		setCompositionRoot(mainLayout);
		listener.setMainWindowCaption("Missing People - Användare");
		
		selectedUsername = null;
		
		homeButton.addListener(new ClickListener() {
			public void buttonClick(ClickEvent event) {
				listener.switchToWelcomeView();
			}
		});
		addButton.addListener(new ClickListener() {
			public void buttonClick(ClickEvent event) {
				listener.switchToUserEditView(null);
			}
		});
		editButton.addListener(new ClickListener() {
			public void buttonClick(ClickEvent event) {
				String selectedUser = getSelectedUser();
				if (selectedUser == null) {
					listener.displayNotification("Ingen användare markerad", "Markera en användare för redigering");
				} else {
					listener.switchToUserEditView(selectedUser);
				}
			}
		});
		deleteButton.addListener(new ClickListener() {
			public void buttonClick(ClickEvent event) {
				String selectedUser = getSelectedUser();
				if (selectedUser == null) {
					listener.displayNotification("Ingen användare markerad", "Markera en användare för borttagning");
				} else {
					Boolean removeStatus = new UserHandler().removeUser(selectedUser);
					if (removeStatus) {
						table.removeItem(selectedUser);
						listener.displayNotification("Användare borttagen", "Användare " + selectedUser + " borttagen");
					} else {
						listener.displayError("Fel", "Användare " + selectedUser + " kunde ej tas bort");
					}
				}
			}
		});
		
		table.addListener(new Property.ValueChangeListener() {
			public void valueChange(ValueChangeEvent event) {
				selectedUsername = (String) event.getProperty().getValue();
			}
		});
		
		populateTable();
	}

	private void populateTable() {
		UserHandler handler = new UserHandler();
		List<User> list = null;
		try {
			list = handler.getListOfUsers();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		BeanContainer<String, User> beans = new BeanContainer<String, User>(User.class);
		beans.setBeanIdProperty("username");
		
		beans.addAll(list);
		table.setContainerDataSource(beans);
		table.setVisibleColumns(new Object[]{"username","role"});
		table.setColumnHeaders(new String[]{"Användarnamn","Roll"});
	}
	
	protected String getSelectedUser() {
		return selectedUsername;
	}
	
	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// verticalSplitPanel_1
		verticalSplitPanel_1 = buildVerticalSplitPanel_1();
		mainLayout.addComponent(verticalSplitPanel_1, "top:35.0px;left:0.0px;");
		
		// homeButton
		homeButton = new Button();
		homeButton.setCaption("Tillbaka");
		homeButton.setImmediate(true);
		homeButton.setWidth("-1px");
		homeButton.setHeight("-1px");
		mainLayout.addComponent(homeButton, "top:0.0px;left:0.0px;");
		
		return mainLayout;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalSplitPanel_1() {
		// common part: create layout
		verticalSplitPanel_1 = new VerticalLayout();
		verticalSplitPanel_1.setImmediate(false);
		verticalSplitPanel_1.setWidth("50.0%");
		verticalSplitPanel_1.setHeight("50.0%");
		verticalSplitPanel_1.setMargin(false);
		
		// userList
		table = new Table("Användare");
		table.setWidth("100.0%");
		table.setHeight("100.0%");
		table.setSelectable(true);
		table.setImmediate(true);
		verticalSplitPanel_1.addComponent(table);
		
		// horizontalLayout_2
		horizontalLayout_2 = buildHorizontalLayout_2();
		verticalSplitPanel_1.addComponent(horizontalLayout_2);
		
		return verticalSplitPanel_1;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_2() {
		// common part: create layout
		horizontalLayout_2 = new HorizontalLayout();
		horizontalLayout_2.setImmediate(false);
		horizontalLayout_2.setWidth("100.0%");
		horizontalLayout_2.setHeight("100.0%");
		horizontalLayout_2.setMargin(false);
		horizontalLayout_2.setSpacing(true);
		
		// filler_1
		filler_1 = new Label();
		filler_1.setImmediate(false);
		filler_1.setWidth("100.0%");
		filler_1.setHeight("-1px");
		filler_1.setValue(" ");
		horizontalLayout_2.addComponent(filler_1);
		horizontalLayout_2.setExpandRatio(filler_1, 1.0f);
		
		// deleteButton
		deleteButton = new Button();
		deleteButton.setCaption("Ta bort");
		deleteButton.setImmediate(true);
		deleteButton.setWidth("-1px");
		deleteButton.setHeight("-1px");
		horizontalLayout_2.addComponent(deleteButton);
		
		// editButton
		editButton = new Button();
		editButton.setCaption("Redigera");
		editButton.setImmediate(true);
		editButton.setWidth("-1px");
		editButton.setHeight("-1px");
		horizontalLayout_2.addComponent(editButton);
		
		// addButton
		addButton = new Button();
		addButton.setCaption("Lägg till");
		addButton.setImmediate(true);
		addButton.setWidth("-1px");
		addButton.setHeight("-1px");
		horizontalLayout_2.addComponent(addButton);
		
		return horizontalLayout_2;
	}

}
